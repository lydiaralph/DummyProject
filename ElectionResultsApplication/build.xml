<?xml version="1.0"?>

<project name="ElectionResultsApplication" default="localMain" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant">

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="./ElectionResultsDependencies/jacocoant.jar"/>
    </taskdef>
	
	<property file="config.properties" />
	
	<property name="distribution" value="ElectionResultsApplication" />
	
	<target name="localMain" depends="setupFolders, getDependencies, compileSrc,compileTests,runtests,testReport" />
	<target name="main" depends="setupFolders, getDependencies, compileSrc" />
	<target name="mainWithTests" depends="setupFolders, getDependencies, compileSrc, compileTests" />
	
	<target name="setupFolders" depends="deleteOldFolders,makeNewFolders,checkFoldersExist"/>
	
	<!-- <target name="getDependencies" depends="setIvyPresent,retrieveWithIvy,retrieveAll" /> -->
	
	<target name="getDependencies" depends="retrieveAll" />
	
	<target name="compileSrc">
		<path id="externalJars">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<echo>building source for: ${distribution}</echo>
		<javac srcdir="src" destdir="dist/${distribution}/classes" debug="on" >
			<classpath refid="externalJars" />
			<classpath location="dist/classes"/>
		</javac>
		<copy todir="dist/${distribution}/classes">
			<fileset file="src/*.x*" /> <!-- intended for xsd and xml files -->
			<fileset file="src/*.txt" /> <!-- intended for text files -->
		</copy>	
		<copy todir="dist/${distribution}/src">
			<fileset dir="src/" />
		</copy>
	</target>
	
	<target name="compileTests">
		<path id="externalJars">
			<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		</path>
		<echo>building tests for: ${distribution}</echo>
		<javac srcdir="../${distribution}/test" destdir="dist/${distribution}/classes" debug="on" >
			<classpath refid="externalJars" />
			<classpath location="dist/${distribution}/classes"/>
		</javac>
		<copy todir="dist/${distribution}/classes">
			<fileset file="../${distribution}/test/*.x*" /> <!-- intended for xsd and xml files -->
			<fileset file="../${distribution}/test/*.txt" /> <!-- intended for text files -->
		</copy>
		<copy todir="dist/${distribution}/test">
			<fileset dir="test" />
		</copy>
	</target>
	
	<target name="runtests" depends="compileTests">
		<mkdir dir="dist/testresults" />
		
		<jacoco:coverage destfile="dist/">
		<junit fork="yes" forkmode="once" failureProperty="test.failed" haltonfailure="${isFail}">
			<classpath location="dist/${distribution}/classes" />

			<classpath>
				<pathelement location="dist/${distribution}/test" />
				<pathelement path="dist/${distribution}/classes" />
				<fileset dir="dist/${distribution}/lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>

			<formatter type="xml" />
			<batchtest fork="no" todir="dist/testresults">
				<fileset dir="dist/${distribution}/test">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
					
			</junit>
		</jacoco:coverage>
	</target>
	
    <target name="testReport" depends="runtests">
        <!-- Step 3: Create coverage report -->
        <jacoco:report>

            <!-- This task needs the collected execution data and ... -->
            <executiondata>
                <file file="dist/jacoco.exec"/>
            </executiondata>

            <!-- the class files and optional source files ... -->
            <structure name="${distribution} coverage report">
                <classfiles>
                    <fileset dir="dist/${distribution}/classes"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="dist/src"/>
                </sourcefiles>
            </structure>

            <!-- to produce reports in different formats. -->
            <html destdir="${result.report.dir}"/>
            <csv destfile="${result.report.dir}/report.csv"/>
            <xml destfile="${result.report.dir}/report.xml"/>
        </jacoco:report>
    </target>
	
	<target name="deleteOldFolders">	
		<delete dir="dist" />
		<delete dir="docs" />
	</target>
	
	<target name="makeNewFolders">
		<mkdir dir="dist" />
		<mkdir dir="dist/${distribution}" />
		<mkdir dir="dist/${distribution}/" />
		<mkdir dir="dist/${distribution}/src" />
		<mkdir dir="dist/${distribution}/test" />
		<mkdir dir="dist/${distribution}/testresults" />
		<mkdir dir="dist/${distribution}/classes" />
		<mkdir dir="dist/${distribution}/lib" />
		<property name="lib.dir" value="dist/${distribution}/lib" />
	</target>
	
	<!-- Should only create these folders if they do not already exist, to avoid overwriting old files -->
	<target name="checkFoldersExist">
		<echo>Creating Inbound folder: ${XML_INBOUND}</echo>
		<mkdir dir="${XML_INBOUND}" />
		
		<echo>Creating Processed folder: ${XML_PROCESSED}</echo>
		<mkdir dir="${XML_PROCESSED}" />
		
		<echo>Creating Invalid folder: ${XML_INVALID}</echo>
		<mkdir dir="${XML_INVALID}" />
	</target>
	
	<target name="setIvyPresent">
		<available property="ivy.file.present" file="ivy.xml"/>
	</target>
	
	<target name="retrieveWithIvy" if="ivy.file.present">
		<echo>Retrieving dependencies with Ivy...</echo>
		<ivy:cleancache/>
		<ivy:retrieve sync="true" pattern="${lib.dir}/[artifact].[revision].[ext]"/>		
	</target>

	<target name="retrieveAll" unless="ivy.file.present">
		<echo>! Ivy is not present. Retrieving all libraries...</echo>
		<copy todir="${lib.dir}">
			<fileset dir="../${distribution}/ElectionResultsDependencies" />
		</copy>
	</target>
		
</project>